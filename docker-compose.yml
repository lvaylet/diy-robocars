version: '2'

services:

  frontend:
    build: ./frontend-vuejs
    expose:
      - '80'

  data:
    build: ./data
    expose:
      - '8080'

  reverse-proxy:
    build: ./reverse-proxy
    ports:
      # Enable web forwarding and map our reverse proxy to port 80
      - '80:80'  # HOST:CONTAINER
    depends_on:
      - node-exporter

  node-exporter:
    image: rycus86/prometheus-node-exporter:0.15.2-armhf
    expose:
      - '9100'
    command:
      # Disable some collectors to save up on bandwidth usage
      # The default collectors send 100 KB of data
      # Reference: https://github.com/prometheus/node_exporter
      - '--no-collector.diskstats'  # saves 9 KB => 91 KB payload
      - '--no-collector.netstat'    # saves 45 KB => 46 KB payload
      - '--no-collector.vmstat'     # saves 14 KB => 32 KB payload

  timelapse:
    build: ./timelapse
    # Allow direct access to hardware resources
    privileged: true
    labels:
      # Bind mount the host OS /lib/modules into the container
      # (i.e. /lib/modules:/lib/modules)
      io.resin.features.kernel-modules: '1'

  i2c:
    build: ./i2c
    # Unlike single container applications, multicontainer applications
    # do not run containers in privileged mode by default. If you want
    # to make use of hardware, you will either have to set some services
    # to privileged, using `privileged: true`, or use the `cap_add` and
    # `devices` settings to map in the correct hardware access to the
    # container.
    devices:
      - '/dev/i2c-1:/dev/i2c-1'
      - '/dev/mem:/dev/mem'
    cap_add:
      - SYS_RAWIO
    labels:
      # Bind mount the host OS /lib/modules into the container
      # (i.e. /lib/modules:/lib/modules)
      io.resin.features.kernel-modules: '1'

  uart:
    build: ./uart-python
    privileged: true
